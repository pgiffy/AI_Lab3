AI_Lab3 - Report

Peter Gifford, Sam Behrens

Implementation Description:
For our implementation we choose to only use Java. We avoided prolog because there were not that many conditions and it was easier to implement the logic with simple if statements than connecting java to a bunch of prolog queries.
We also avoided prolog because the simplified rule set made the game easier to measure and make an AI play. The first advantage of the simplified rules was the lack of the need to turn. This allowed us to use nodes and just count the distances to the desired spot rather than actually moving the character one space at a time. We also did not have to take direction into account for shooting the arrow because our implementation would only shoot the arrow if we thought that the Wumpus was there. Because there is only one Wumpus, if the arrow did not kill him there would be no way for it to hit anything down the line because we would only shoot a space that is one spot away from a stink as we moved into it. 
Our solution was heavily based on searching using breadth first to find the most optimal paths. To decide what space we needed to move to, we implemented a system similar to the classic game minesweeper. Each node had a Wumpus value and a pit value attached to it. If our character felt a breeze then all the spaces surrounding him (if he had not been there before) gained one pit value. The same logic was used for the Wumpus and stink. Also, if the character stepped into a space with no stink or breeze then all the surrounding spaces would lose one pit value and Wumpus value. This allowed our AI to have an understanding of the risk associated with each square. 
The logic we used revolved around this number system. The primary mode of movement was checking if the squares next to the player had zeros or less points wise. If these exist, then the player just moves to the guaranteed safe space. However these spaces run out quickly. Once there is no 0 space next to the player. We run a breadth first search to find a 0 space that can be reached through spaces that have already been traveled. If there are no guaranteed safe moves based off of the search then we switch to choosing the safest nonzero space. As the character moves around we keep a list of spaces that are made nonzero. We search through this list to see the best option. We first narrow down the list to spaces with the lowest total scores between pit value and Wumpus value. Then we take the smaller list and prioritize spaces with bigger rumpus values. Once the space is chosen we move into the space. If the space has a Wumpus value then we try to kill the Wumpus as we move into the space. Once we have done this once and no longer have the arrow we remove the priority of the wumpus space and just randomly pick a space with the lowest cumulative value. Also, if the Wumpus is killed then we remove the Wumpus value from all the tiles because there is no longer a risk. 
When either of the above spaces are found we run breadth first search to find the shortest path there. Also, once we find the gold then we immediately run breadth first to find the shortest path back to the start square on only already traveled spaces. 
This strategy has played out very well because we can easily choose the most optimal paths to preserve the life of the player and can avoid making probabilities and shifts the weight of the scores based on the Wumpus living or not.
Also because we cannot leave without the gold this is an efficient way to keep life for the longest amount of time maximizing the ability to find the gold and get a lot more points. We also counted picking up the gold as an action, moving a space as an action and shooting the arrow is not an action.
Takes in a single number as an argument that is the size of the board to be created and solved.

First Order Logic Rules:

∀ y Smelly(y) ⇔ [∃ x Wumpus(x) ∧ Adjacent(x, y)]
∀ y Breezy(y) ⇔ [∃ x Pit(x) ∧ Adjacent(x, y)]
∀ s AtGold(s) ⇒ Holding(Gold, Result(Grab,s))
∀ s surroundedByDanger(y) ⇒ Action(RememberZero, t)
∀ s moveOffSmelly(y) ⇒ Action(Shoot, t)
∀ s cannotRememberZero(y) ⇒ Action(ChooseBestPath, t)



Results:

Size: 4x4
_G_P
___W
__P_
____
Found gold
Cells entered: 15
Points: 985

Size: 5x5
____G
P__P_
__P__
W____
_____
Wumpus Screams
Found gold
Cells entered: 31
Points: 959

Size: 8x8
_______P
___P___G
_W______
______P_
______P_
P______P
___P__P_
_____P_P
Found gold
Cells entered: 59
Points: 941

Size: 10x10
__________
______P_P_
__PP______
PP________
__________
_PP_____P_
____G__P_W
P_P___PP_P
__________
__________
Found gold
Cells entered: 29
Points: 971



Analysis:
Based on our results we can see that our AI is pretty good. While it tends to get killed often, it is very effective if there is a clear path. It struggles when there are a lot of obstacles because once it runs out of known safe spaces, it has to take a guess based on our version of "proportions." While our method of picking the best option usually performs very well because tests show that we often kill the wumpus then move far on, the way the game works means that sometimes the AI just has to guess. 

Statements of Individual Contribution:
Peter Gifford - I helped to collaboratively create the set of logic rules with Sam. I also worked with Sam to get all the setup involving the board and searching with Sam. I then plugged in a lot of the code to implement the logic rules and when to run the searched to move. 

Sam Behrens - I worked with Peter to setup the board and flesh out how exactly we were going to solve this problem. Then, we both got started on implementing it and I did all of the clean up after the solution was found

